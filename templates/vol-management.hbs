<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Activity Tracker</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&family=Roboto:wght@300&display=swap" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Roboto', sans-serif;
      background: linear-gradient(to bottom right, #f4f4f4, #e0f7fa);
      color: #333;
      min-height: 100vh;
      overflow-x: hidden;
    }

    .hero-section {
      height: 100vh;
      background-image: linear-gradient(
            rgba(255, 255, 255, 0.7),  /* Light white */
            rgba(255, 255, 255, 0.372),  /* Light white */
            rgba(255, 255, 255, 0.187)
            ),
            url('staffDash.jpeg');
      background-size: cover;
      background-position: center;
      display: flex;
      align-items: center;
      justify-content: center;
      text-align: center;
      color: #fff;
      position: relative;
    }

    .hero-section::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.5);
    }

    .hero-text {
      position: relative;
      z-index: 1;
    }

    h1.hero-title {
      font-family: 'Poppins', sans-serif;
      font-weight: 700;
      font-size: 64px;
      letter-spacing: 3px;
      text-transform: uppercase;
      margin-bottom: 20px;
      animation: slideInDown 1.5s ease;
    }

    .hero-subtitle {
      font-family: 'Poppins', sans-serif;
      font-weight: 300;
      font-size: 24px;
      margin-bottom: 40px;
      animation: fadeInUp 2s ease;
    }

    button.hero-btn {
      padding: 15px 40px;
      background-color: #ff5722;
      color: #fff;
      border: none;
      border-radius: 50px;
      font-size: 18px;
      cursor: pointer;
      transition: all 0.3s ease;
      animation: fadeInUp 2.5s ease;
    }

    button.hero-btn:hover {
      background-color: #e64a19;
      transform: translateY(-3px);
    }

    @keyframes slideInDown {
      from {
        transform: translateY(-50px);
        opacity: 0;
      }
      to {
        transform: translateY(0);
        opacity: 1;
      }
    }

    @keyframes fadeInUp {
      from {
        transform: translateY(50px);
        opacity: 0;
      }
      to {
        transform: translateY(0);
        opacity: 1;
      }
    }

    /* Form and Task Section */
    .container {
      width: 90%;
      max-width: 1200px;
      margin: 0 auto;
      padding-top: 50px;
    }

    h2.section-title {
      font-family: 'Poppins', sans-serif;
      text-align: center;
      font-size: 36px;
      color: #333;
      margin-bottom: 20px;
      text-transform: uppercase;
      letter-spacing: 2px;
    }

    .form-container {
      display: flex;
      justify-content: space-between;
      margin-bottom: 30px;
      animation: fadeInUp 1.5s ease;
    }

    .form-group {
      flex: 1;
      margin-right: 20px;
    }

    .form-group input {
      width: 100%;
      padding: 15px;
      font-size: 16px;
      border-radius: 10px;
      border: 2px solid #ddd;
      transition: all 0.3s ease;
    }

    .form-group input:focus {
      border-color: #ff5722;
      outline: none;
      box-shadow: 0 0 8px rgba(255, 87, 34, 0.2);
    }

    button {
      padding: 15px 40px;
      font-family: 'Poppins', sans-serif;
      background-color: #ff5722;
      font-size: 16px;
      color: white;
      border: none;
      border-radius: 50px;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    button:hover {
      /* background-color: #e64a19; */
      transform: translateY(-3px);
    }

    /* Task List and Cards */
    .task-list {
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
    }

    .task-card {
      width: 30%;
      background-color: #fff;
      border-radius: 15px;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
      padding: 20px;
      margin-bottom: 20px;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      animation: fadeInUp 1.8s ease;
      position: relative; /* Added for menu positioning */
    }

    .task-card:hover {
      transform: translateY(-10px);
      box-shadow: 0 6px 25px rgba(0, 0, 0, 0.15);
    }

    .task-title {
      font-family: 'Poppins', sans-serif;
      font-size: 20px;
      color: #333;
      margin-bottom: 10px;
    }

    .progress-bar {
      background-color: #f2f2f2;
      border-radius: 10px;
      height: 12px;
      margin-bottom: 20px;
    }

    .progress-bar-inner {
      background-color: #ff5722;
      height: 100%;
      border-radius: 10px;
      width: 0;
      transition: width 1s ease;
    }

    .chart-container {
      margin-top: 50px;
      display: flex;
      justify-content: center;
      align-items: center;
      animation: fadeInUp 2s ease;
    }

    .chart-container canvas {
      max-width: 600px;
      margin: 0 auto;
    }

   /* Three dots menu (vertical ellipsis) styles */
.menu-container {
    position: absolute;
    top: 10px;
    right: 10px;
}

.menu-btn {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: black; /* Set the color to black */
    padding: 5px;
}

.menu-btn:hover {
    color: black; /* Prevent the color from changing on hover */
    transform: none; /* Prevent any transform changes on hover */
}

.menu-btn:focus {
    outline: none; /* Remove the outline when the button is focused */
}

.menu-dropdown {
    display: none;
    position: absolute;
    right: 0;
    background-color: white;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    z-index: 1;
    border-radius: 5px; /* Rounded corners */
    padding: 10px 0;
    width: 150px;
}

.menu-dropdown button {
    display: block;
    padding: 10px 20px;
    width: 100%;
    text-align: left;
    border: none;
    background: none;
    cursor: pointer;
    font-size: 14px;
    color: #333;
}

.menu-dropdown button:hover {
    background-color: #f4f4f4;
}

    /* Modal Styles */
    .modal {
      display: none; /* Hidden by default */
      position: fixed;
      z-index: 999;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.4); /* Black background with transparency */
      align-items: center;
      justify-content: center;
    }

    .modal-content {
      background-color: #fff;
      padding: 20px;
      border-radius: 8px;
      width: 400px;
      text-align: center;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      animation: fadeInUp 0.3s ease;
    }

    .modal-content input {
      width: 80%;
      padding: 10px;
      margin: 10px 0;
      border: 2px solid #ddd;
      border-radius: 5px;
    }

    .modal-actions {
      display: flex;
      justify-content: space-between;
      margin-top: 15px;
    }

    .modal-actions button {
      width: 45%;
      padding: 10px;
      border: none;
      cursor: pointer;
      background-color: #ff5722;
      color: white;
      border-radius: 5px;
    }

    .modal-actions button:hover {
      background-color: #e64a19;
    }

    .modal-close {
      background-color: #aaa;
    }

    .modal-close:hover {
      background-color: #888;
    }

    /* Animations */
    @keyframes fadeInUp {
      from {
        transform: translateY(50px);
        opacity: 0;
      }
      to {
        transform: translateY(0);
        opacity: 1;
      }
    }
  </style>
</head>

<body>
  <!-- Hero Section -->
  <div class="hero-section">
    <div class="hero-text">
      <h1 class="hero-title">Activity Tracker</h1>
      <p class="hero-subtitle">Track Your Progress</p>
      <button class="hero-btn">Back</button>
    </div>
  </div>

  <!-- Form Section -->
  <div class="container">
    <h2 class="section-title">Add New Activity</h2>
    <form action="/add-activity" method="POST" enctype="multipart/form-data">
  <div class="form-container">
    <div class="form-group">
      <input type="text" name="description" id="task" placeholder="Activity Description" required>
    </div>
    <div class="form-group">
      <input type="number" name="hours" id="hours" placeholder="Hours Spent" required>
    </div>
    <div class="form-group">
      <input type="file" name="media" id="media" accept="image/*, video/*">
    </div>
    <button type="submit" id="addTaskBtn">Add Task</button>
  </div>
</form>


    <!-- Task List Section -->
    <div class="task-list" id="taskList"></div>

    <!-- Chart Section -->
    <div class="chart-container">
      <h2>Work Analytics</h2>
      <canvas id="workAnalyticsChart"></canvas>
    </div>
  </div>

  <!-- Modal for Edit/Delete -->
  <div id="modal" class="modal">
    <div class="modal-content">
      <h3>Edit Activity</h3>
      <input type="text" id="editTask" placeholder="Activity Description" />
      <input type="number" id="editHours" placeholder="Hours Spent" />
      <div class="modal-actions">
        <button id="saveChangesBtn">Save</button>
        <button id="cancelBtn" class="modal-close">Cancel</button>
      </div>
    </div>
  </div>

  <script>
    const taskList = document.getElementById('taskList');
    const tasks = [];
    const tasks = {{json activities}}; 
    const chartColors = ['#ff5722', '#4caf50', '#2196f3', '#9c27b0', '#e91e63', '#ffc107'];
    let chart;

    // Edit modal variables
    const modal = document.getElementById("modal");
    const editTaskInput = document.getElementById("editTask");
    const editHoursInput = document.getElementById("editHours");
    let editingIndex = null; // to track which task is being edited

    document.getElementById('addTaskBtn').addEventListener('click', addTask);
    document.getElementById('cancelBtn').addEventListener('click', () => modal.style.display = 'none'); // Close modal on cancel

    function addTask() {
      const taskInput = document.getElementById('task');
      const hoursInput = document.getElementById('hours');
      const mediaInput = document.getElementById('media');
      const taskValue = taskInput.value;
      const hoursValue = parseInt(hoursInput.value);
      const mediaFile = mediaInput.files[0];

      if (!taskValue || !hoursValue || !mediaFile) {
        alert('Please fill all fields.');
        return; // Stop further execution
      }

      // Get today's date
      const dateAdded = new Date().toLocaleDateString();

      let mediaUrl = '';
      if (mediaFile) {
        mediaUrl = URL.createObjectURL(mediaFile); // Create URL for image/video
      }

      const newTask = { task: taskValue, hours: hoursValue, media: mediaUrl, mediaType: mediaFile ? mediaFile.type : null, date: dateAdded };
      tasks.push(newTask);
      renderTasks();
      updateChart();

      // Clear the input fields after adding the task
      taskInput.value = '';
      hoursInput.value = '';
      mediaInput.value = ''; // Clear the file input
    }

    function renderTasks() {
      taskList.innerHTML = '';
      tasks.forEach((task, index) => {
        const taskCard = document.createElement('div');
        taskCard.classList.add('task-card');
        
        let mediaElement = '';
        if (task.mediaType && task.mediaType.startsWith('image')) {
          mediaElement = `<img src="${task.media}" alt="Activity Media" style="width: 100%; height: 150px; object-fit: cover;" />`;
        } else if (task.mediaType && task.mediaType.startsWith('video')) {
          mediaElement = `<video width="100%" controls><source src="${task.media}" type="${task.mediaType}">Your browser does not support the video tag.</video>`;
        }

        taskCard.innerHTML = `
          <h3 class="task-title">${task.task}</h3>
          <p>Date Added: ${task.date}</p>
          <div class="progress-bar">
            <div class="progress-bar-inner" style="width: ${task.hours * 10}%"></div>
          </div>
          <p>${task.hours} hours spent</p>
          ${mediaElement}
          <div class="menu-container">
            <!-- Three dots menu -->
            <button class="menu-btn" onclick="toggleMenu(${index})">⋮</button>
            <div class="menu-dropdown" id="menu-${index}">
              <button onclick="openEditModal(${index})">Edit</button>
              <button onclick="deleteTask(${index})">Delete</button>
            </div>
          </div>
        `;
        taskList.appendChild(taskCard);
      });
    }

    // Toggle the visibility of the dropdown menu
    function toggleMenu(index) {
    const menu = document.getElementById(`menu-${index}`);
    const allMenus = document.querySelectorAll('.menu-dropdown');
    allMenus.forEach((item, idx) => {
      if (idx !== index) {
        item.style.display = 'none'; // Close all other menus
      }
    });
    menu.style.display = (menu.style.display === 'block') ? 'none' : 'block';
  }

  document.addEventListener('click', function (e) {
    const menus = document.querySelectorAll('.menu-dropdown');
    menus.forEach(menu => {
      if (!menu.contains(e.target) && e.target.className !== 'menu-btn') {
        menu.style.display = 'none';
      }
    });
  });

    // Open edit modal
    function openEditModal(index) {
      editingIndex = index;
      const task = tasks[index];
      editTaskInput.value = task.task;
      editHoursInput.value = task.hours;
      modal.style.display = 'flex'; // Show modal
    }

    // Delete task functionality
    function deleteTask(index) {
      if (confirm('Are you sure you want to delete this task?')) {
        tasks.splice(index, 1);  // Remove the task from the array
        renderTasks();  // Re-render the task list
        updateChart();  // Update the chart
      }
    }

    // Save changes in edit modal
    document.getElementById('saveChangesBtn').addEventListener('click', () => {
      const task = tasks[editingIndex];
      task.task = editTaskInput.value;
      task.hours = parseInt(editHoursInput.value);
      modal.style.display = 'none';  // Close modal after saving
      renderTasks();
      updateChart();
    });

    function updateChart() {
      const labels = tasks.map(task => task.task);
      const data = tasks.map(task => task.hours);
      const backgroundColor = chartColors.slice(0, tasks.length);

      const ctx = document.getElementById('workAnalyticsChart').getContext('2d');
      if (chart) {
        chart.destroy();
      }
      chart = new Chart(ctx, {
        type: 'doughnut',  // Changed from 'pie' to 'doughnut'
        data: {
          labels: labels,
          datasets: [{
            label: 'Hours Spent',
            data: data,
            backgroundColor: backgroundColor,
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            tooltip: {
              callbacks: {
                label: function(tooltipItem) {
                  return `${tooltipItem.label}: ${tooltipItem.raw} hours`;
                }
              }
            },
            legend: {
              display: true,
              position: 'bottom',
              labels: {
                color: '#333',
                padding: 15,
              }
            }
          }
        }
      });
    }
    document.querySelector('form').addEventListener('submit', function(event) {
        console.log("Form is being submitted!");
    });
  </script>

</body>
</html>
